---
title: "Programming for Data Science"
author: "yuchihchia"
date: "4/01/2020"
output: 
  html_document:
    toc: true
    toc_depth: 3
    toc_float:
      collapsed: false
      smooth_scroll: TRUE
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

#第3章 R Basics  
## 3.1 Package  
安裝package  
```{r}
#install.packages(c("dplyr", "lubridate", "googlesheets4"))
```
啟動package  
```{r}
library(googlesheets4)
library(dplyr)
library(lubridate)
```
***  
## 3.2 Create objects  
```{r}
a <- 2
a = 2 # = 與 <-同義
3 -> b
```
變數命名規則:  

1. 須由字母、數字、點(.)以及底線(_)構成  
2. **開頭必須是字母或是點(但點後不能接數字)**  

辨別變數命名規則  
```{r}
my_108_total_credits <- 15
#_108_total_credits <- 15
#108_total_credits <- 15
#_my_108_total_credits <- 15
my.108.total_credits <- 15
#.108.total_credits <- 15 
.my.108.total_credits <- 15
我的108學年總學分數 <- 15

#針對特殊名稱(不符變數命名規則)的處理: 在名稱前後加上` (並不是名稱的一部份)`
`我的108學年總學分數` <- 15 
`.108.total_credits` <- 15
```
常見命名方式:  

1. snake: `my_total_credits <- 15`  
2. **camel**: `myTotalCredits <- 15` (推薦使用)  

***  
##3.3 Calling an object  
```{r}
`我的年紀` <- 20
my_age <- `我的年紀`
```
要呼叫某物件時，請先確認Environment裡有該物件存在，或執行**ls()**  
```{r}
ls() #查看Environment裡共有哪些物件存在
```
***  
##3.4 Atomic vector  
```{r}
num1 <- 5
vNum1 <- c(2,5)
vNum2 <- c(2, num1)
```
只有一個值的向量可以不寫`c()`，以下兩變數值相同:  
```{r}
num1 <- 5
num2 <- c(5)
```
向量的堆疊依然是向量:  
```{r}
vNum1 <- c(-1,5)
vNum2 <- c(2,3)
vNum3 <- c(vNum1,vNum2)
vNum4 <- c(-1,5,2,3)
vNum5 <- c(c(-1,5),c(2,3))
```
vNum3、vNum4、vNum5變數值相同  
```{r}
vNum1 <- c(-1,5)
vNum2 <- c(2,3)
vNum4 <- c() # 空向量
```
```{r}
vNum3 <- c(vNum2, vNum1)
vNum4 <- c(vNum4, vNum1) # 向量疊代（recursive vector concatenate）
```
Atomic vector依其值的型態（type）而分成以下三類型:  

1. Numeric(數值，非整數) / Integer(整數)  
2. Character  
3. Logical  

### 3.4.1 Numeric / Integer  
```{r}
num1<-5 # 非整數，5會被電腦記成5.0000
num2<-5L # 整數，5L才會被電腦記成整數5
num1Vector<-c(5,6,7)
num2Vector<-c(5L,6L,7L)
```

### 3.4.2 Character  
在定義object value時，必須要用「成對」的雙引號`"`或單引號`'`，把每個字串括起來  
```{r}
char1<-"你好"
char2<-'你好'
char1Vector<-c("你好","How are you?")
```
使用`class(物件名稱)`查詢上述物件類別  
```{r}
dialogue <- c('小明說："明天不用上課。"', '小花說："真的嗎？"')
#電腦會記錄成"小明說：\"明天不用上課。\"" "小花說：\"真的嗎？\""
cat(dialogue, sep="\n")  #\n"是指換行
```
R的換行原則是: 只要指令定義不全，如括號不成對少右半邊（只有`(`卻沒看到`)`）或結尾是`,` 等等都表示指令不完整，R會再往下一行看，如下一行還是不完整就再往下一行。  
```{r eval=FALSE}
library(httr)
library(dplyr)
library(magrittr)
GET("https://api.github.com/repos/tpemartin/108-2-56-inclass-practice/commits") %>%
  content() %>%
  View()
```
查詢函數用法:  

1. Script window: 游標放在函數名稱任何一個位置，按F1。  
2. Console window: ?函數名稱 按enter。  
3. 右下角Help tab的放大鏡打函數名稱。  
```{r}
#請把以上對白改成:
#小明說：'明天不用上課。'
#小花說：'真的嗎？'
cat(c("小明說：'明天不用上課。'", "小花說：'真的嗎？'"), sep="\n")  
```
```{r eval=FALSE}
#以下程式碼中變數出席狀況表單網址缺乏變數值，請貼上本班出席表單網址使該變數值有定義。
library(googlesheets4)
library(httpuv)
`出席狀況表單網址` <-  "https://docs.google.com/spreadsheets/d/1EAG49qDKPWWi0ebkVr29TLrvVnoBPfkvxYY-J3xLAHY/edit#gid=458686645"
ss <- as_sheets_id(`出席狀況表單網址`)
homework_sheet <- sheets_read(ss, sheet=1)
```
### 3.4.3 Logical  
邏輯：  

* 為「真」: `T`或`TRUE` (要全大寫)。  
* 為「否」: `F`或`FALSE` (要全大寫)。  
```{r}
logi1 <- c(T,TRUE,F,FALSE,FALSE)
```
邏輯值遇到數學運算時T會被當成1，而F會被當成0
```{r}
#sum(數值向量): 加總向量內所有元素的數值。
sum(logi1)
```
### 3.4.4 `typeof()`  
顯示atomic vector元素的基本認定型態，它代表電腦記憶體在儲存時真正看待的型態。  
```{r}
num <- c(1.5, 2, 3)
int <- c(1L, 3L, -2L)
char <- c("1.5","2","3")
logi <- c(T,T,F)
typeof(num)
typeof(int)
typeof(char)
typeof(logi)
```
### 3.4.5 `class()`
依資料的螢幕顯示型態及能對它進行的操作所做的分類。  
```{r}
class(num)
class(int)
class(char)
class(logi)
```
## 3.5 Atomic Vector Extended  
以下介紹兩個數字串向量而延伸的兩個類別:  

* factor: 類別資料[`factor(字串向量)`]  
* POSIXct/POSIXt: 時間資料[`ymd_hms(字串向量)`]  

### 3.5.1 Factor  
```{r}
#10位學生的主修科系
majors10_char <- c('經濟學系','社會學系','社會學系','經濟學系','經濟學系','社會學系','經濟學系','經濟學系','經濟學系','社會學系')
typeof(majors10_char)
class(majors10_char)
majors10_factor <- factor(majors10_char)
# 或
majors10_factor <- factor(c('經濟學系','社會學系','社會學系','經濟學系','經濟學系','社會學系','經濟學系','經濟學系','經濟學系','社會學系')
)
typeof(majors10_factor)
class(majors10_factor)
```
majors10_char及majors10_factor的螢幕顯示型態是不同的:  
```{r}
majors10_char
majors10_factor
```
`as.integer()`將資料的class轉成integer。由於factor被轉成integer後，其螢幕顯示會顯示電腦是用什麼數字在存這些類別資料。  
```{r}
as.integer(majors10_factor) 
```
數字與類別文字的對照表mapping table:  
```{r}
levels(majors10_factor)
```
Factor屬於atomic vector延伸的類別，其基本儲存型態還是會落在先前的基本型態裡，但多了資料顯示的mapping table。  

### 3.5.2 Class conversion  
R有一系列的`as.{class名稱}(物件)`的函數用來轉換物件的class；`as.{type名稱}(物件)`用來轉換物件的type。  
例如: `as.integer(物件)`會將該物件(嘗試)轉成integer class/type的物件。  
```{r}
stringInteger <- c("1","2","-11")
class(stringInteger) # 無法進行數值運算
```
```{r error=TRUE}
stringInteger+2
```
```{r}
trueInteger <- as.integer(stringInteger)
class(trueInteger) # 可以進行數值運算
typeof(trueInteger)
trueInteger+2
char3 <- c("小明","1","3")
as.integer(char3) #因為"小明"無法轉換為numeric形式，故硬是轉換下會變成NA
```
R的函數均不會主動更改輸入物件，只會把結果值另行輸出，所以若要保留轉換結果則必需指定到一個物件名稱上。
```{r}
stringInteger <- as.integer(stringInteger)
class(stringInteger)
```
```{r}
#以下為學生學號
studentId <- c(410773002, 410773015)
#它目前是什麼class
class(studentId)
#學號用什麼class比較合理
studentId <- as.character(studentId)
class(studentId)
```
### 3.5.3 Date / Time
處理時間所需資訊:  

* 時間輸入方式  
* 時間來自時區  
* 時間儲存以哪個時區為準（進行比較用）  
其中最後一點通訊協定是採UTC時區為公定標準，故不用煩惱。  
```{r}
library(lubridate)
```
#### 3.5.3.1 台北  
**2020-03-18 13:52:40**  

* 時間輸入方式: ymd_hms  
* 時間來自時區: Asia/Taipei  
```{r}
tpeTime <- ymd_hms("2020-03-18 13:52:40", tz="Asia/Taipei")
```
我們使用lubridate中的ymd_hms函數有以下兩種做法：  

1. 作法一: 使用library()
```{r}
library(lubridate)
tpeTime <- ymd_hms("2020-03-18 13:52:40", tz="Asia/Taipei")
```
2. 作法二: 不使用library()
```{r}
tpeTime <- lubridate::ymd_hms("2020-03-18 13:52:40", tz="Asia/Taipei")
```
#### 3.5.3.2 葡萄牙
**Mar.18, 2020, 05:52:40**  

* 時間輸入方式: mdy_hms  
* 時間來自時區: Europe/Lisbon  
```{r}
pgTime <- mdy_hms("Mar.18, 2020, 05:52:40", tz="Europe/Lisbon")
```
來自相同時區、相同輸入方式的時間文字字串，可以直接套入相同函數轉成Date/Time類別。
```{r}
tpeTime <- c("2020-03-18 13:52:40", "2020-03-11 03:12:40")
tpeTime <-ymd_hms(tpeTime, tz="Asia/Taipei")
#相當於
tpeTime <- ymd_hms(c("2020-03-18 13:52:40","2020-03-11 03:12:40"), 
                   tz="Asia/Taipei")
```
若時間字串來自UTC，那可以不設定tz參數，即
```{r}
ymd_hms(c("2020-03-18 13:52:40","2020-03-11 03:12:40"))
```
若時間字串長得像“2020-03-11T06:56:17Z”，它來自UTC時區:  
```{r}
ymd_hms("2020-03-11T06:56:17Z")
```
```{r  eval=FALSE}
browseURL("https://docs.google.com/spreadsheets/d/1EAG49qDKPWWi0ebkVr29TLrvVnoBPfkvxYY-J3xLAHY/edit#gid=458686645")
```
```{r}
studentTime <- c(ymd_hms("2020-03-04T06:56:29Z"),
                 ymd_hms("2020-03-11 14:16:43", tz="Asia/Taipei"),
                 ymd_hms("2020-03-11 14:34:33", tz="Asia/Taipei")
                 )
studentTime
```
#### 3.5.3.3 以某個時區顯示  
以UTC表示  
```{r}
with_tz(tpeTime, tzone="UTC")
with_tz(pgTime, tzone="UTC")
```
以Europe/Paris表示  
```{r}
with_tz(tpeTime, tzone="Europe/Paris")
with_tz(pgTime, tzone="Europe/Paris")
with_tz(studentTime, tzone = "Europe/Paris")
```
#### 3.5.3.4 type  
```{r}
class(tpeTime)
typeof(tpeTime)
as.numeric(tpeTime)
as.numeric(pgTime)
```
Date/Time的儲存其實是數值，它的原點是UTC時區的1970-01-01 00:00:00。 as.numeric(tpeTime)的值顯示tpeTime離那個原點已過了多少秒。
```{r}
#數於Date/Time class的向量內容是數值，所以它是可以做數值相減。請問台北“2020-03-11 12:55:30”與巴黎“2020-02-13 15:33:10”相減後會出現什麼？
ymd_hms("2020-03-11 12:55:30", tz="Asia/Taipei")-ymd_hms("2020-02-13 15:33:10", tz="Europe/Paris")
```
## 3.6 List  
特色:   

1. 每個元素值可以是不同type的物件值。
```{r}
`小明交易1` <- list(`時間`=ymd_hms("2020-03-31T13:40:55Z"),
                    `飲料店`="一芳",
                    `數量`=2,
                    `飲料`="水果茶")
str(`小明交易1`)
```
2. 物件值可以是vector形式，也可以list。  
```{r}
# list含兩個vectors
`小明108學年課表A` <- list(c("108-1","高級會計學","高等統計學"),
                           c("108-2","食在拉丁美洲")
                          )
str(`小明108學年課表A`)
# list含兩個lists
`小明108學年課表B` <- list(list("108-1","高級會計學","高等統計學"),
                           list("108-2","食在拉丁美洲")
                          )
str(`小明108學年課表B`)
# list含兩個lists, 子層list又各含兩個vectors
`小明108學年課表C` <- list(list(c("108-1"), # 可只寫 "108-1"
                                c("高級會計學","高等統計學")
                               ),
                           list(c("108-2"),
                                c("食在拉丁美洲")
                               )
                           )
str(`小明108學年課表C`)
```
3. 物件值可以取名。
```{r}
`小明108學年課表D` <- list(`108學年第1學期`=list(c("108-1"),
                                                 c("高級會計學","高等統計學")
                                                ),
                           `108學年第2學期`=list(c("108-2"),
                                                 c("食在拉丁美洲")
                                                )
                          )
str(`小明108學年課表D`)
commit <- list(author=list(name="Martin老師",
                           email="mtlin@gm.ntpu.edu.tw",
                           date=ymd_hms("2020-03-25T07:17:40Z")
                           ),
               comitter=list(name="emilyluckey",
                             email="emily007@gmail.com",
                             date=ymd_hms("2020-03-26T08:18:40Z")
                             ),
               message="update"
               )
str(commit)
```
網路上的資料回傳大部份時候長得像list的格式。

這種回傳資訊格式叫做**JSON**(JavaScript Object Notation)，每個程式語法都會準備一個物件形式用來儲存接收到的JSON資料；R會用list type，Python會用dictionary type。  

也因為每個程式都可接收JSON形式資料，不同程式開發者若有必要進行網路資訊交換時會將複雜資料結構轉成JSON再交換出去。  

我們的程式要在網路送出commit資訊時，可以透過以下程序將list轉成JSON: 
```{r}
library(jsonlite)
toJSON(commit)
```
```{r}
#學生小明，在108學年第1學期修了Alice老師所授的個體經濟學(得分85分)、Mark老師所授的總體經濟學(得分73分)。在108學年第2學期修了Jason老師所授的作業研究(得分90分)。
`小明的修課記錄` <- list(name="小明",
                         semesters=list(`108-1`=list(
                           course1_1081=list(name="個體經濟學",
                                             teacher="Alice",
                                             grade=85
                                             ),
                           course2_1081=list(name="總體經濟學",
                                             teacher="Mark",
                                             grade=78
                                             )
                                       ),
                                        `108-2`=list(
                           course1_1082=list(name="作業研究",
                                             teacher="Jason",
                                             grade=90
                                             )
                                                    )
                                       )
                        )
str(`小明的修課記錄`)
```
```{r}
#今("2020-03-31")明("2020-04-01")兩天「台北市」氣溫最高25度，最低18度；「新北市」氣溫最高24度，最低15度。
temperature <- list(date=list(today=ymd("2020-03-31"),
                              tomorrow=ymd("2020-04-01")
                              ),
                    location=list(taipei=list(high=25,low=18),
                                  newtaipei=list(high=24,low=15)
                                  )
                    )
str(temperature)
```
game的定義： A game involves three components:

1. A list of players  
2. Moves each player can make (strategies)  
3. A listing of payoffs, or benefits, for each player on each eventual outcome (a utility function for outcomes)  
<img src="C:/Users/USER/Documents/GitHub/yikahui/gametheory.png" style="display:block; margin:auto; width:50%;">  
```{r}
game<-list(players=list(player1="A",player2="B"),
           strategies=list(player1=list(strategy1="stay_silent",strategy2="betray"),
                           player2=list(strategy1="stay_silent",strategy2="betray")
                           ),
           `payoffs: (player1, player2)`=list(
               #mapping from all possible player1 strategy vs player2 strategy
               player1=list(strategy1=list(player2=list(strategy1=c(-1,-1),
                                                        strategy2=c(-3,0))
                                           ),
                            strategy2=list(player2=list(strategy1=c(0,-3),
                                                        strategy2=c(-2,-1)
                                                        )
                                           )
                            )
                                            )
           )
str(game)
# 查詢strategies
game$strategies$player1$strategy1
game$strategies$player2$strategy2
# 查詢payoffs
## player1:strategy1, player2:strategy2
game$`payoffs: (player1, player2)`$player1$strategy1$player2$strategy2
## player1:strategy2, player2:strategy2
game$`payoffs: (player1, player2)`$player1$strategy2$player2$strategy2
```
## 3.7 物件儲存  

* 存下Global Environment中有的物件: `save(object1, object2, ..., file="myData.Rda")`  
* 下次取回來Global Environment用: `load("myData.Rda")`
```{r}
object1 <- c(2,5)
object2 <- ymd_hms(c("2015-03-22 12:28:42","2017-12-22 15:33:48"),
                   tz="Asia/Taipei"
                  )
object3 <- list(2, FALSE, c("a","b","c"))
save(object1, object2, object3, file="threeObjects.Rda")
```
```{r}
load("threeObjects.Rda")
```

# 第4章 Operation on vector and list  
## 4.1 選取元素  
### 4.1.1 選「一個元素」  
* 用位置選: `物件[[數字]]`  
```{r}
vectorExample <- c("小明","小英","大雄")
#確認有多少位置可選
length(vectorExample)
vectorExample[[1]]
vectorExample[[3]]
listExample <- list(student="小明",
                    `學期`=list(`108-1`=list(list(name="個體經濟學",
                                                  teacher="Alice",
                                                  grade=85)
                                             ),
                                `108-2`=list(list(name="總體經濟學",
                                                  teacher="Mark",
                                                  grade=78)
                                             )
                                )
                    )
#確認有多少位置可選
length(listExample)
listExample[[1]]
listExample[[2]]
#臺南市運動地圖
library(jsonlite)
fromJSON("https://data.tainan.gov.tw/dataset/4cd9345a-04bf-4328-a97d-314ff78b4763/resource/afc025fc-1ef4-447c-b785-a680391d0ca1/download/tnsport2.json", simplifyDataFrame = F) -> tainanSportsMap
length(tainanSportsMap)
str(tainanSportsMap[[1]]) 
```
* 用名字選: `物件$名字`
```{r}
#確認有多少名字可選
names(listExample)
listExample$student
listExample$`學期`
```
* 用名字選: `物件[["名字"]]`
```{r}
listExample[["student"]]
listExample$student
listExample[["學期"]]
listExample$`學期`
```
```{r}
#新北市各區衛生所之門診時間及疫苗種類彙整表
fromJSON("http://data.ntpc.gov.tw/api/v1/rest/datastore/382000000A-000157-002",
         simplifyDataFrame = F) -> newTaipeiCityVaccine
str(newTaipeiCityVaccine$result, max.level = 1) #顯示到第一層
```

### 4.1.2 選「多個元素」  

* 用位置選: `物件[數字向量]`
```{r}
vectorExample
vectorExample[c(1,3)]
vectorExample[c(3,2,1)] #產生重新排列效果
str(listExample, max.level=1)
listExample[c(1,2)]
str(tainanSportsMap[c(87,666)])
```
* 用名字選: `物件[名字向量]`
```{r}
listExample[c("student","學期")]
```
```{r}
#臺北市夜市資料(來自臺北市食材登錄平台食材來源資訊)
fromJSON("https://www.dropbox.com/s/qnm9bnz7vccrvcz/taipeiNightMarkets.json?dl=1", simplifyDataFrame = F) -> taipeiNightMarkets
names(taipeiNightMarkets)
str(taipeiNightMarkets[c("士林觀光夜市","寧夏觀光夜市","饒河街觀光夜市")])
```
* 用邏輯向量選: `物件[邏輯向量]`
```{r}
vectorExample
vectorExample[c(T,T,F)]
str(listExample[c(T,T)])
```
```{r}
str(taipeiNightMarkets[c(T,F,F,F,T,F,F,F,F,T,F,F,F,T)])
```
**`[[.]]`與`[.]`比較**
```{r}
str(listExample)
#以下兩個表面都是選取"學期"
get1 <- listExample[["學期"]]
get2 <- listExample["學期"]
```
* `[[]]`: 拿出某個物件值。`listExample[["學期"]]`將listExample裡的"學期"物件值拿出來
* `[]`: 留下某個物件值。`listExample["學期"]`「只留下」listExample裡的"學期"物件值
```{r}
get1
str(get1)
get1$`108-1`[[1]]$teacher
get2
str(get2)
get2[[1]]$`108-1`[[1]]$teacher
```

### 4.1.3 連鎖選取  
```{r}
numVector <- c(2,3,6,-1,4,2,6)
numVector[c(1,4)][[1]]
numVector[c(T,T,F,T,F,F,T)][c(1,4)]
majors <- c("經濟學系","經濟學系","社會學系","社工系","經濟學系")
names <- c("小英", "小美", "大雄","阿華", "阿尼")
gender <- c("F","F","M","F","M")
econOnly <- majors=="經濟學系"
names[econOnly]
gender[econOnly]
econFemaleOnly <- gender[econOnly]=="F"
names[econOnly][econFemaleOnly]
```
#### 4.1.3.1 list應用
atomic vector其實也可以像list對元素命名，然而用名稱取元素值在atomic vector: 

* 只能用`[ ]`或`[[ ]]`;
* 不能用`$`。（`$`只適用在list）。
```{r}
vector1 <- c(a=1,b=3,c=4)
vector1[["a"]]
vector1[c("a","c")]
#vector1$a 不能用
list1 <- list(a=1,b=3,c=4)
list1[["a"]]
list1[c("a","c")]
list1$a
#今明兩日台北市、新北市氣溫
weather <- list(today=list(taipei=list("`台北市`",
                                       highest_temp=c(highest_temp=18),
                                       lowest_temp=c(lowest_temp=15)
                                       ),
                           newTaipei=list("`新北市`",
                                       highest_temp=c(highest_temp=18),
                                       lowest_temp=c(lowest_temp=15)
                                       )
                           ),
                tommorrow=list(taipei=list("`台北市`",
                                       highest_temp=c(highest_temp=18),
                                       lowest_temp=c(lowest_temp=15)
                                       ),
                           newTaipei=list("`新北市`",
                                       highest_temp=c(highest_temp=18),
                                       lowest_temp=c(lowest_temp=15)
                                       )
                           )
                )
weather[[1]][[2]]$highest_temp # 今天/新北市/highest_temp
weather[[2]][[2]]$highest_temp # 明天/新北市/highest_temp
```
#### 4.1.3.2 list補充
```{r}
library(jsonlite)
fromJSON("https://www.dropbox.com/s/6252gbdnv9owljm/dance.json?dl=1", simplifyDataFrame = F) -> dance
# 前三筆演出的名稱
dance[[1]]$title
dance[[2]]$title
dance[[3]]$title 
```
若要針對向量或list裡的每個元素反覆進行相同操作，purrr是相當方便的套件，最常用的是: `map(向量或串列, 每個元素要做的事)`
```{r}
library(purrr)
map(dance,~.x$title) -> dance_title
dance[[1]]$showInfo
length(dance[[1]]$showInfo)
dance[[2]]$showInfo
length(dance[[2]]$showInfo)
#length(dance[[1]]$showInfo)
#length(dance[[2]]$showInfo)
# ...
#length(dance[[34]]$showInfo)

map(dance,~length(.x$showInfo)) -> dance_showInfoLength
```

```{r}
#選出每個活動的「活動起始日期」
map(dance,~.x$startDate) -> dance_startDate
#選出每個活動的「活動名稱」及「活動起始日期」
map(dance,~list(title=.x$title,startDate=.x$startDate)) -> dance_startDate
#選出每個活動showInfo下的每場次之「單場次演出時間」及「場地名稱」（只用到map, 及~。）
```
```{r eval=FALSE}
dance[[1]]$showInfo[[1]][c("time","locationName")] #第1個活動舉辦1次
dance[[2]]$showInfo[[1]][c("time","locationName")] #第2個活動舉辦3次
dance[[2]]$showInfo[[2]][c("time","locationName")]
dance[[2]]$showInfo[[2]][c("time","locationName")]

map(dance[[1]]$showInfo,~.x[c("time","locationName")]),
map(dance[[2]]$showInfo,~.x[c("time","locationName")])

```
```{r}
#新北市公車路線清單: 找出Id(路線代碼)、providerId(業者代碼)、providerName(業者中文名稱)、nameZh(中文名稱)
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/67BB3C2B-E7D1-43A7-B872-61B2F082E11B?$format=json", simplifyDataFrame = F) -> busRoutes
map(busRoutes,~.x[c("Id","providerId","providerName","nameZh")]) -> busRoutesInfo
busRoutesInfo[[1]]
```
## 4.2 新增/替換/刪除元素  
### 4.2.1 新增/替換元素  
元素提取`[.]`,`[[.]]`,`$.`也可用來進行元素「值」的修改與新增, 使用方法為：  
  
* `obj[.] <- value`  
* `obj[[.]] <- value`  
* `obj$. <- value`  

若`.`所指定的元素不存在，則為「新增」。  

若`.`所指定的元素存在，則為「修改」。  
```{r}
a <- c("1","b","TRUE")
a
a[[2]] <- "c" # 元素存在: 替換
a[[4]] <- "7" # 元素不存在： 增加
a[c(5,6)] <- c("J", "K")
a
#增加一個“Johnson”使用[[.]]<-
a[[7]] <- "Johnson"
#使用前一章的向量疊代(recursive vector concatenate)法，新增一個“Mary”
a <- c(a,"Mary")
a
library(lubridate)
list1 <- list(list(name="Jack",
                   birthday=ymd("1998-03-21"),
                   status=c(height=177, weight=80)
                   )
              )
str(list1)
# 更改日期
list1[[1]]$birthday <- ymd("1997-03-21")
# 新增資料
list1[[2]] <- list(name="Mary",
                   birthday=ymd("1998-08-24")
                   )
str(list1)
#替Mary依Jack的記錄方式增加身高163，體重45
list1[[2]]$status <- c(height=163, weight=45)
#將Jack的身高改成176
list1[[1]]$status[[1]] <- 176 #不要用list1[[1]]$status$hight，這種做法下list1[[1]]$status會變成list格式
str(list1)
```
使用`[.] <- `  

由於`[.]`會保留母層結構，所以`<-`右側要使用和母層相同的型態設定：  

* 母層若為list，則需用`list(...)`方式增加  

* 母層若為atomic vector，則用`c(...)`方式增加  
```{r}
list1[[1]][["age"]] <- 21
list1[[2]]["age"] <- list(21)
# 改變「一個」時，使用[[ ]]比較不會錯。
str(list1)
list1[[1]][c("bloodType","registered")] <- list("AB",TRUE)
str(list1)
#由listExample進行以下任務: 
#108-1新增一個產業經濟學
str(listExample)
listExample$`學期`$`108-1`[[2]] <- list(name="產業經濟學")
#產業經濟學，同時加上教師Wen及成績88
listExample$`學期`$`108-1`[[2]][c("teacher","grade")] <- list("Wen",88)
str(listExample)
```
### 4.2.2 刪除元素  
刪除可以使用[- c(數字位置)]  

* 只能「一個」中括號（[[.]]不能接受負數值）  
* 只能用負數值，不能用元素名稱  
```{r}
a[-c(1,3)]
a[c(-2)]
print(a)
a[-c(1,3)] -> a # 要回存才算真的刪除
#自先前list1範例:刪除Jack的status., blookType.，以及Mary的status
list1[[1]][-c(3,5)] -> list1[[1]] # 小心回存的位置
list1[[2]][-3] -> list1[[2]]
str(list1)
```
list元素要刪除時也可以用`[.]<-NULL`, `[[.]]<-NULL`
```{r}
list1[[2]][c(1,2)] <- NULL
str(list1)
```
















